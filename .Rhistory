getcwd()
getwd()
setwd("./Repositories/")
setwd("./Repositories")
setwd("C:\Users\Lewis.Bails\Repositories\nfl_study")
setwd("C:/Users/Lewis.Bails/Repositories/nfl_study")
getwd()
ls
plot(cars)
df = read.csv("./data/field_goals.csv")
df
df = read.csv("./data/field_goals.csv")
rownames(df) = df$pid
df
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select=-c("pid"))
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select=-c(pid,))
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select=-c(pid))
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select=-c(year))
df
df
df = read.csv("./data/field_goals.csv", row.names = "pid")
df
df
install.packages("cem")
library(cem)
library(cem)
require(cem)
df = read.csv("./data/field_goals.csv", row.names = "pid")
describe(df)
df = read.csv("./data/field_goals.csv", row.names = "pid")
summary(df)
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select = -c(age, kicks))
summary(df)
plot(cars)
plot(cars)
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select = -c(age, kicks, form))
summary(df)
plot(cars)
plot(cars)
plot(cars)
library(cem)
require(cem)
tr = which(df$good==1)
ct = which(df$good==0)
mean(df$good[tr]) - mean(df$good[ct])
print(mean)
library(cem)
require(cem)
tr = which(df$good==1)
ct = which(df$good==0)
mean(df$good[tr]) - mean(df$good[ct])
library(cem)
require(cem)
tr = which(df$good==1)
ct = which(df$good==0)
length(tr)
length(ct)
mean(df$good[tr]) - mean(df$good[ct])
library(cem)
require(cem)
tr = which(df$altitude==1)
ct = which(df$altitude==0)
length(tr)
length(ct)
mean(df$good[tr]) - mean(df$good[ct])
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select = -c(age, kicks, form))
# drop home kicks at altitude
df = df[df$altitude==0 | df$away_game==1]
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select = -c(age, kicks, form))
# drop home kicks at altitude
df = df[df$altitude==0 | df$away_game==1,]
summary(df)
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select = -c(age, kicks, form))
# drop home kicks at altitude
df = df[df$altitude==0 || df$away_game==1,]
summary(df)
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select = -c(age, kicks, form))
# drop home kicks at altitude
df = df[which(df$altitude==0 || df$away_game==1),]
summary(df)
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select = -c(age, kicks, form))
# drop home kicks at altitude
df = df[which(df$altitude==0 || df$away_game==1),]
summary(df)
df
df = read.csv("./data/field_goals.csv", row.names = "pid")
df = subset(df, select = -c(age, kicks, form))
# drop home kicks at altitude
df = df[which(df$altitude==0 | df$away_game==1),]
summary(df)
df
library(cem)
require(cem)
tr = which(df$altitude==1)
ct = which(df$altitude==0)
length(tr)
length(ct)
mean(df$good[tr]) - mean(df$good[ct])
library(cem)
require(cem)
treatment = "altitude"
tr = which(df$treatment==1)
ct = which(df$treatment==0)
length(tr)
length(ct)
mean(df$good[tr]) - mean(df$good[ct])
imbalance(group=df$treatment, data=colnames(subset(df, select=-c(good, treatment))))
library(cem)
require(cem)
treatment = "altitude"
tr = which(df$treatment==1)
ct = which(df$treatment==0)
length(tr)
length(ct)
mean(df$good[tr]) - mean(df$good[ct])
imbalance(group=df$treatment, data=colnames(subset(df, select=-c(good))))
library(cem)
require(cem)
treatment = altitude
library(cem)
require(cem)
treatment = 'altitude'
tr = which(df[treatment]==1)
ct = which(df[treatment]==0)
length(tr)
length(ct)
mean(df$good[tr]) - mean(df$good[ct])
imbalance(group=df[treatment], data=colnames(subset(df, select=-c(good))))
library(cem)
require(cem)
treatment = 'altitude'
tr = which(df[treatment]==1)
ct = which(df[treatment]==0)
length(tr)
length(ct)
mean(df$good[tr]) - mean(df$good[ct])
imbalance(group=df[treatment], data=subset(df, select=-c(good)))
library(cem)
require(cem)
treatment = 'altitude'
tr = which(df[treatment]==1)
ct = which(df[treatment]==0)
length(tr)
length(ct)
mean(df$good[tr]) - mean(df$good[ct])
imbalance(group=df[treatment], data=df)
imbalance(group=df$altitude, data=df)
imbalance(group=df$altitude, data=subset(df, select=-c(good))
)
)))
))Adspfk[opke]
imbalance(group=df$altitude, data=subset(df, select=-c(good)))
# imbalance before matching
imbalance(group=df[treatment], data=subset(df, select=-c(good)))
# Altitude Study
# read data
df = read.csv("./data/field_goals.csv", row.names="pid")
df = subset(df, select=-c(form, age, kicks))
# drop home kicks at altitude
df = df[which(df$altitude==0 | df$away_game==1)]
summary(df)
# get the Coursened Exact Matching package
library(cem)
require(cem)
treatment = 'altitude'
tr = which(df[treatment]==1)
ct = which(df[treatment]==0)
length(tr)
length(ct)
mean(df$good[tr]) - mean(df$good[ct])
# imbalance before matching
imbalance(group=df[treatment], data=subset(df, select=-c(good)))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
df$altitude
df["altitude"]
df$altitude
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mat
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mat$w
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
tab = relax.cem(mat, df, depth=1, perc=0.3)
plot(tab)
plot(tab, group="1", perc=0.35, unique=TRUE)
relax.plot(tab, group="1", perc=0.35, unique=TRUE)
relax.plot(tab, group="1", perc=0.35, unique=TRUE)
relax.cem()
relax.cem(tab)
relax.plot()
relax.plot(tab)
tab
tab = relax.cem(mat, df, depth=2, perc=0.3)
tab = relax.cem(mat, df, depth=2, perc=0.3, fixed=c("away_game","postseason","iced","turf","precipitation"))
tab = relax.cem(mat, df, depth=2, perc=0.3, fixed=c("away_game","postseason","iced","turf","precipitation"), plot=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
df
require(glm)
weights = df.weight
df.weight
df
df[,"weight"]
df[:,"weight"]
df
df[:,c("weight",)]
df[,c("weight",)]
df[,c("weight")]
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,c("weight",)], data=df[,~c("weight",)], family=binomial())
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,c("weight",)], data=df, family=binomial())
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,c("weight")], data=df, family=binomial())
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,"weight"], data=df, family=binomial())
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,c("weight")], data=df, family=binomial())
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,c("weight",)], data=df, family=binomial())
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,c("weight")], data=df, family=binomial())
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,c("weight")], data=df, family="binomial"
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,c("weight")], data=df, family=binomial())
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = df[,c("weight")], data=df, family="binomial")
weights = df[,c("weight")]
weights
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = weights, data=df, family="binomial")
len(weights)
length(weights)
length(df)
length(df.rows)
length(df.T)
NROW(df)
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = weights, data=df, family="binomial")
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = 'weight', data=df, family="binomial")
df[,"weights"]
df[,"weight"]
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = 'weight', data=df, family="binomial")
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = "weight", data=df, family="binomial")
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = "weight", data=df[,~c("weight")], family="binomial")
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = "weight", data=df[,~c("weight",)], family="binomial")
df[,~c("weight")]
df[,~c("weight",)]
df[,-c("weight",)]
df[,-c("weight")]
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights = "weight", data=subset(df, select=-c("weight",)], family="binomial")
subset(df, select=-c("weight",)]
subset(df, select=-c("weight")]
subset(df, select=-c("weight"))
subset(df, select=-c("weight",))
subset(df, select=-weight)
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights =subset(df, select=weight), data=subset(df, select=-weight), family="binomial")
subset(df, select=weight)
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights =subset(df, select=weight), data=subset(df, select=-weight), family="binomial")
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights=subset(df, select=weight), data=subset(df, select=-weight), family="binomial")
subset(df, select=weight)
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights=subset(df, select=weight), data=subset(df, select=-weight), family="binomial")
subset(df, select=-weight)
nrows(subset(df, select=-weight))
NROWS(subset(df, select=-weight))
NROWS(df)
NROW(df)
NROW(subset(df, select=-weight))
NROW(subset(df, select=weight))
model = glm('good ~ dist + year + seasons + temperature + wind + pressure + postseason + iced + precipitation + turf + away_game + altitude', weights=subset(df, select=weight), data=subset(df, select=-weight), family="binomial")
